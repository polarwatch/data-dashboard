{"title":"CoastWatch-West Coast","markdown":{"yaml":{"title":"CoastWatch-West Coast","format":{"dashboard":{"logo":"img/cw_logo.png","logo-alt":"NOAA CoastWatch logo","scrolling":true}},"jupyter":"python3"},"headingText":"Columns for stats","containsRefs":false,"markdown":"\n\n```{python}\n#| label: load-packages\nimport pandas as pd\nimport requests\nimport io\nfrom itables import show\nimport datetime\nimport plotly.io as pio\npio.renderers.default = \"iframe_connected\"\n```\n\n```{python}\n#| label: load-data\n\ndf = pd.read_csv(\"data/wcn_usage.csv\")\ndf_crosswalk = pd.read_csv(\"data/wcn_log_crosswalk.csv\")\n\nstats_cols = ['data_volume', 'requests', 'nc_req', 'dods_req', 'text_req',\n       'metadata_req', 'graph_req', 'json_req', 'mat_req', 'images_req',\n       'file_downloads_req', 'other_req', 'nc_volume', 'dods_volume',\n       'text_volume', 'metadata_volume', 'graph_volume', 'json_volume',\n       'mat_volume', 'images_volume', 'file_downloads_volume', 'other_size',\n       'requests_redirect', 'nc_req_redirect', 'dods_req_redirect',\n       'text_req_redirect', 'metadata_req_redirect', 'graph_req_redirect',\n       'json_req_redirect', 'mat_req_redirect', 'images_req_redirect',\n       'file_download_req_redirect', 'other_req_redirect', 'all_requests']\n\n# This year\nthisyear = datetime.date.today().year\n\n# Color \ncolors = ['#003f5c', '#58508d', '#bc5090', '#ff6361', '#ffa600']\n\n```\n\n```{python}\n#| label: prep-usage-data\n\n# Combine requests and redirect requests\ndf['all_requests'] = df['requests'] + df['requests_redirect']\n\n# Add year and month to the df\ndf['time'] = pd.to_datetime(df['time'], utc=True)\ndf['year'] = df['time'].dt.year\ndf['month'] = df['time'].dt.month\n\n# Merge log and cross walk (inner join)\ndf_all = df.merge(df_crosswalk, on='dataset_id', how='inner')\n\n# Get all_dataset\nalldata = df[df['dataset_id'] == 'all_datasets']\n\n# Compute sum for all datasets\nalldata_sum = alldata.groupby(['year'])[stats_cols].sum().reset_index()\n\n# Compute mean stats for all dataset\nalldata_mean = alldata.groupby(['year'])[['unique_visitors']].mean().reset_index()\n\n# ValueBox items\ntotal_requests = alldata_sum.loc[alldata_sum['year'] == thisyear, 'requests'].iloc[0]\ntotal_redirect = alldata_sum.loc[alldata_sum['year'] == thisyear, 'requests_redirect'].iloc[0]\nunique_users = int(alldata_mean.loc[alldata_mean['year'] == thisyear, 'unique_visitors'].iloc[0])\ntotal_data = alldata_sum.loc[alldata_sum['year'] == thisyear, 'data_volume'].iloc[0]\n\n\n# Top 10 data for current year\ndf_all_thisyear = df_all[df_all['year'] == thisyear]\n#df_all_thisyear = df[df['year'] == thisyear].merge(df_crosswalk, on='dataset_id', how='inner')\ntop10_thisyear = (df_all_thisyear.groupby('group_title', as_index=False)[['all_requests', 'requests_x', 'requests_redirect']]\n                  .sum(numeric_only=True)\n                  .nlargest(10, 'all_requests'))\n\n# Top 10 data time series (based on current year top 10)\ntop10_years = (df_all[df_all['group_title'].isin(top10_thisyear['group_title'])]\n              .groupby(['group_title', 'year'], as_index=False)[['all_requests']]\n              .sum())\n              \n```\n\n# Top 10 Data Request\n## Row {height=10%}\n\n::: {.valuebox icon=\"cloud-download-fill\" color=\"#d1d1d1\"}\nNo. of Requests\n\n`{python} \"{:,}\".format(total_requests)`\n:::\n\n::: {.valuebox icon=\"database-down\" color=\"#e1dbd6\"}\nNo. of Redirect Request\n\n`{python} \"{:,}\".format(total_redirect)`\n:::\n\n::: {.valuebox icon=\"database-down\" color=\"#e2e2e2\"}\nData Volume (Mb)\n\n`{python} \"{:,}\".format(total_data)`\n:::\n\n::: {.valuebox icon=\"person-lines-fill\" color=\"#f9f6f2\"}\nMonthly Avg Users\n\n`{python} unique_users`\n:::\n\n\n## Row {height=40% .tabset}\n\n```{python}\n#| title: Top 10 Data Chart\n\nimport plotly.express as px\n\n# Set graphing order \ntop10_years['year'] = top10_years['year'].astype(str)\ntop10_years = top10_years.sort_values(by='year')\n\n#sorted = top10_years.sort_values(by=['year', 'all_requests'], ascending=False)\n\n# Plotly barchart\nfig = px.bar(top10_years, x='group_title', y='all_requests', \n              color='year', labels={\"group_title\": \"Group Name\", \"all_requests\": \"Requests\"}, color_discrete_sequence=colors[::-1],barmode='group', width=None)\n\n# Set plotly config\nfig.update_layout(autosize=True, \n       width=None, \n       height=None, \n       xaxis=dict(tickangle=15),\n       legend=dict(\n       orientation=\"h\",  # Horizontal orientation\n       yanchor=\"bottom\",\n       y=1.1,            # Position slightly above the plot area\n       xanchor=\"center\",\n       x=0.5,\n       font=dict(size=13))\n              )\n```\n\n```{python}\n#| title: Top 10 Data Table\n\nwide_top10_years = top10_years.pivot(index='group_title', columns ='year', values='all_requests').reset_index()\nwide_top10_years.columns.name = None  # Remove the name from columns index if not needed\nwide_top10_years = (wide_top10_years\n              .rename_axis(None, axis=1)\n              .rename(columns={'group_title': 'Group Name'}))\n\n\nshow(wide_top10_years)\n\n```\n\n\n## Row \n\n\n```{python}\n#| title: Requests by File Type\n\n\nimport plotly.express as px\ndf_req = alldata_sum[alldata_sum['year'] == thisyear].filter(regex='_req$')\ndf_req.columns = df_req.columns.str.extract(r'^(.*)_req$')[0]\ndf_req_long = df_req.reset_index(drop=True).melt(var_name='File Type', value_name='Requests')\n\nfig = px.pie(df_req_long, values='Requests', names='File Type', title='Request by file type')\nfig.show()\n\n\n```\n\n\n```{python}\n#| title: Download (Kb) by File Type\n\nimport plotly.express as px\ndf_volume= alldata_sum[alldata_sum['year'] == thisyear].filter(regex='_volume$')\ndf_volume.columns = df_volume.columns.str.extract(r'^(.*)_volume$')[0]\ndf_volume_long = df_volume.reset_index(drop=True).melt(var_name='File Type', value_name='Volume')\nfig = px.pie(df_volume_long, values='Volume', names='File Type')\n\nfig\n\n\n```\n\n\n# SST\n\n```{python}\n\n# Top 10\n \ndf_all_thisyear = df[df['year'] == thisyear].merge(df_crosswalk, on='dataset_id', how='inner')\ntop10_sst_thisyear = (df_all_thisyear[df_all_thisyear['var']=='sst'].groupby('group_title', as_index=False)[['all_requests', 'requests_x', 'requests_redirect']]\n                  .sum(numeric_only=True)\n                  .nlargest(10, 'all_requests'))\n\n\n# SST sumed by year and dataset_title\ndf_sst = df_all[df_all['var'] == 'sst'].groupby(['year', 'dataset_title'], as_index=False).sum(numeric_only=True).reset_index()\ntop10_sst = df_sst[df_sst['year'] == thisyear].nlargest(10, 'all_requests')\nsst_stats = df_sst[df_sst['year'] == thisyear].sum(numeric_only=True)\n\n\n# value box\nreq_sst = sst_stats[sst_stats.index == 'all_requests'].item()\nuser_sst = sst_stats[sst_stats.index == 'unique_visitors'].item()\ndata_sst = sst_stats[sst_stats.index == 'data_volume_x'].item()\n\n# top10_sst chart\ntop10_sst_years = (df_all[df_all['dataset_title'].isin(top10_sst['dataset_title'])]\n              .groupby(['dataset_title', 'year'], as_index=False)[['all_requests']]\n              .sum())\n\n# top10_sst data table\n#top10_sst.loc[:, ['year', 'dataset_title', 'all_requests']]\ntop10_sst_wide = top10_sst_years.pivot(index='dataset_title', columns ='year', values='all_requests').reset_index()\ntop10_sst_wide.columns.name = None\ntop10_sst_wide = (top10_sst_wide\n              .rename_axis(None, axis=1)\n              .rename(columns={'dataset_title': 'Dataset Title'}))\n\n\n```\n\n## Row {height=10%}\n\n\n::: {.valuebox icon=\"cloud-download-fill\" color=\"#d1d1d1\"}\nNo. of Requests\n\n`{python} \"{:,}\".format(req_sst)`\n\n:::\n\n\n::: {.valuebox icon=\"database-down\" color=\"#e2e2e2\"}\nData Volume (GB)\n\n`{python} \"{:,}\".format(data_sst)`\n\n:::\n\n::: {.valuebox icon=\"person-lines-fill\" color=\"#f9f6f2\"}\nTotal Visitors\n\n`{python} int(user_sst)`\n\n:::\n\n\n## Row {height=30% .tabset}\n\n\n```{python}\n#| title: Top 10 SST\n\nimport plotly.express as px\n\n# top10_sst chart\ntop10_sst_years['year'] = top10_years['year'].astype(str)\n#sorted = top10_sst_years.sort_values(by=['year', 'all_requests'], ascending=False)\n\n\nfig = px.bar(top10_sst_years, x='dataset_title', y='all_requests', \n              color='year', labels={\"dataset_title\": \"Dataset Name\", \"all_requests\": \"Requests\"}, color_discrete_sequence=colors[::-1],barmode='group', width=None)\n\nfig.update_layout(autosize=True, \n       width=None, \n       height=None, \n       xaxis=dict(tickangle=15),\n       legend=dict(\n       orientation=\"h\",  # Horizontal orientation\n       yanchor=\"bottom\",\n       y=1.1,            # Position slightly above the plot area\n       xanchor=\"center\",\n       x=0.5,\n       font=dict(size=13))\n              )\n# show(top10_years)\n```\n\n```{python}\n#| title: Top 10 Data Table\n\nwide_top10_sst = top10_sst_years.pivot(index='dataset_title', columns ='year', values='all_requests').reset_index()\nwide_top10_sst.columns.name = None  # Remove the name from columns index if not needed\nwide_top10_sst = (wide_top10_sst\n              .rename_axis(None, axis=1)\n              .rename(columns={'dataset_title': 'Dataset Name'}))\n\nshow(wide_top10_sst)\n\n```\n\n\n# Wind\n\n```{python}\n\ntop10_wind_thisyear = (df_all_thisyear[df_all_thisyear['var']=='wind'].groupby('group_title', as_index=False)[['all_requests', 'requests_x', 'requests_redirect']]\n                  .sum(numeric_only=True)\n                  .nlargest(10, 'all_requests'))\n\n\n# wind sumed by year and dataset_title\ndf_wind = df_all[df_all['var'] == 'wind'].groupby(['year', 'dataset_title'], as_index=False).sum(numeric_only=True).reset_index()\ntop10_wind = df_wind[df_wind['year'] == thisyear].nlargest(10, 'all_requests')\nwind_stats = df_wind[df_wind['year'] == thisyear].sum(numeric_only=True)\n\n\n# value box\nreq_wind = wind_stats[wind_stats.index == 'all_requests'].item()\nuser_wind = wind_stats[wind_stats.index == 'unique_visitors'].item()\ndata_wind = wind_stats[wind_stats.index == 'data_volume_x'].item()\n\n# top10_wind chart\ntop10_wind_years = (df_all[df_all['dataset_title'].isin(top10_wind['dataset_title'])]\n              .groupby(['dataset_title', 'year'], as_index=False)[['all_requests']]\n              .sum())\n\n\ntop10_wind_wide = top10_wind_years.pivot(index='dataset_title', columns ='year', values='all_requests').reset_index()\ntop10_wind_wide.columns.name = None\ntop10_wind_wide = (top10_wind_wide\n              .rename_axis(None, axis=1)\n              .rename(columns={'dataset_title': 'Dataset Title'}))\n\n\n```\n\n## Row {height=10%}\n\n\n::: {.valuebox icon=\"cloud-download-fill\" color=\"#d1d1d1\"}\nNo. of Requests\n\n`{python} \"{:,}\".format(req_wind)`\n\n:::\n\n\n::: {.valuebox icon=\"database-down\" color=\"#e2e2e2\"}\nData Volume (GB)\n\n`{python} \"{:,}\".format(data_wind)`\n\n:::\n\n::: {.valuebox icon=\"person-lines-fill\" color=\"#f9f6f2\"}\nTotal Visitors\n\n`{python} int(user_wind)`\n\n:::\n\n \n## Row {height=40% .tabset}\n\n\n\n```{python}\n#| title: Top 10 wind\n\nimport plotly.express as px\n\n# top10_wind chart\ntop10_wind_years['year'] = top10_years['year'].astype(str)\n#sorted = top10_wind_years.sort_values(by=['year', 'all_requests'], ascending=False)\n\n\nfig = px.bar(top10_wind_years, x='dataset_title', y='all_requests', \n              color='year', labels={\"dataset_title\": \"Dataset Name\", \"all_requests\": \"Requests\"}, color_discrete_sequence=colors[::-1],barmode='group', width=None)\n\nfig.update_layout(autosize=True, \n       width=None, \n       height=None, \n       xaxis=dict(tickangle=15),\n       legend=dict(\n       orientation=\"h\",  # Horizontal orientation\n       yanchor=\"bottom\",\n       y=1.1,            # Position slightly above the plot area\n       xanchor=\"center\",\n       x=0.5,\n       font=dict(size=13))\n              )\n# show(top10_years)\n```\n\n```{python}\n#| title: Top 10 Data Table\n\nwide_top10_wind = top10_wind_years.pivot(index='dataset_title', columns ='year', values='all_requests').reset_index()\nwide_top10_wind.columns.name = None  # Remove the name from columns index if not needed\nwide_top10_wind = (wide_top10_wind\n              .rename_axis(None, axis=1)\n              .rename(columns={'dataset_title': 'Dataset Name'}))\n\nshow(wide_top10_wind)\n\n```\n","srcMarkdownNoYaml":"\n\n```{python}\n#| label: load-packages\nimport pandas as pd\nimport requests\nimport io\nfrom itables import show\nimport datetime\nimport plotly.io as pio\npio.renderers.default = \"iframe_connected\"\n```\n\n```{python}\n#| label: load-data\n\ndf = pd.read_csv(\"data/wcn_usage.csv\")\ndf_crosswalk = pd.read_csv(\"data/wcn_log_crosswalk.csv\")\n\n# Columns for stats\nstats_cols = ['data_volume', 'requests', 'nc_req', 'dods_req', 'text_req',\n       'metadata_req', 'graph_req', 'json_req', 'mat_req', 'images_req',\n       'file_downloads_req', 'other_req', 'nc_volume', 'dods_volume',\n       'text_volume', 'metadata_volume', 'graph_volume', 'json_volume',\n       'mat_volume', 'images_volume', 'file_downloads_volume', 'other_size',\n       'requests_redirect', 'nc_req_redirect', 'dods_req_redirect',\n       'text_req_redirect', 'metadata_req_redirect', 'graph_req_redirect',\n       'json_req_redirect', 'mat_req_redirect', 'images_req_redirect',\n       'file_download_req_redirect', 'other_req_redirect', 'all_requests']\n\n# This year\nthisyear = datetime.date.today().year\n\n# Color \ncolors = ['#003f5c', '#58508d', '#bc5090', '#ff6361', '#ffa600']\n\n```\n\n```{python}\n#| label: prep-usage-data\n\n# Combine requests and redirect requests\ndf['all_requests'] = df['requests'] + df['requests_redirect']\n\n# Add year and month to the df\ndf['time'] = pd.to_datetime(df['time'], utc=True)\ndf['year'] = df['time'].dt.year\ndf['month'] = df['time'].dt.month\n\n# Merge log and cross walk (inner join)\ndf_all = df.merge(df_crosswalk, on='dataset_id', how='inner')\n\n# Get all_dataset\nalldata = df[df['dataset_id'] == 'all_datasets']\n\n# Compute sum for all datasets\nalldata_sum = alldata.groupby(['year'])[stats_cols].sum().reset_index()\n\n# Compute mean stats for all dataset\nalldata_mean = alldata.groupby(['year'])[['unique_visitors']].mean().reset_index()\n\n# ValueBox items\ntotal_requests = alldata_sum.loc[alldata_sum['year'] == thisyear, 'requests'].iloc[0]\ntotal_redirect = alldata_sum.loc[alldata_sum['year'] == thisyear, 'requests_redirect'].iloc[0]\nunique_users = int(alldata_mean.loc[alldata_mean['year'] == thisyear, 'unique_visitors'].iloc[0])\ntotal_data = alldata_sum.loc[alldata_sum['year'] == thisyear, 'data_volume'].iloc[0]\n\n\n# Top 10 data for current year\ndf_all_thisyear = df_all[df_all['year'] == thisyear]\n#df_all_thisyear = df[df['year'] == thisyear].merge(df_crosswalk, on='dataset_id', how='inner')\ntop10_thisyear = (df_all_thisyear.groupby('group_title', as_index=False)[['all_requests', 'requests_x', 'requests_redirect']]\n                  .sum(numeric_only=True)\n                  .nlargest(10, 'all_requests'))\n\n# Top 10 data time series (based on current year top 10)\ntop10_years = (df_all[df_all['group_title'].isin(top10_thisyear['group_title'])]\n              .groupby(['group_title', 'year'], as_index=False)[['all_requests']]\n              .sum())\n              \n```\n\n# Top 10 Data Request\n## Row {height=10%}\n\n::: {.valuebox icon=\"cloud-download-fill\" color=\"#d1d1d1\"}\nNo. of Requests\n\n`{python} \"{:,}\".format(total_requests)`\n:::\n\n::: {.valuebox icon=\"database-down\" color=\"#e1dbd6\"}\nNo. of Redirect Request\n\n`{python} \"{:,}\".format(total_redirect)`\n:::\n\n::: {.valuebox icon=\"database-down\" color=\"#e2e2e2\"}\nData Volume (Mb)\n\n`{python} \"{:,}\".format(total_data)`\n:::\n\n::: {.valuebox icon=\"person-lines-fill\" color=\"#f9f6f2\"}\nMonthly Avg Users\n\n`{python} unique_users`\n:::\n\n\n## Row {height=40% .tabset}\n\n```{python}\n#| title: Top 10 Data Chart\n\nimport plotly.express as px\n\n# Set graphing order \ntop10_years['year'] = top10_years['year'].astype(str)\ntop10_years = top10_years.sort_values(by='year')\n\n#sorted = top10_years.sort_values(by=['year', 'all_requests'], ascending=False)\n\n# Plotly barchart\nfig = px.bar(top10_years, x='group_title', y='all_requests', \n              color='year', labels={\"group_title\": \"Group Name\", \"all_requests\": \"Requests\"}, color_discrete_sequence=colors[::-1],barmode='group', width=None)\n\n# Set plotly config\nfig.update_layout(autosize=True, \n       width=None, \n       height=None, \n       xaxis=dict(tickangle=15),\n       legend=dict(\n       orientation=\"h\",  # Horizontal orientation\n       yanchor=\"bottom\",\n       y=1.1,            # Position slightly above the plot area\n       xanchor=\"center\",\n       x=0.5,\n       font=dict(size=13))\n              )\n```\n\n```{python}\n#| title: Top 10 Data Table\n\nwide_top10_years = top10_years.pivot(index='group_title', columns ='year', values='all_requests').reset_index()\nwide_top10_years.columns.name = None  # Remove the name from columns index if not needed\nwide_top10_years = (wide_top10_years\n              .rename_axis(None, axis=1)\n              .rename(columns={'group_title': 'Group Name'}))\n\n\nshow(wide_top10_years)\n\n```\n\n\n## Row \n\n\n```{python}\n#| title: Requests by File Type\n\n\nimport plotly.express as px\ndf_req = alldata_sum[alldata_sum['year'] == thisyear].filter(regex='_req$')\ndf_req.columns = df_req.columns.str.extract(r'^(.*)_req$')[0]\ndf_req_long = df_req.reset_index(drop=True).melt(var_name='File Type', value_name='Requests')\n\nfig = px.pie(df_req_long, values='Requests', names='File Type', title='Request by file type')\nfig.show()\n\n\n```\n\n\n```{python}\n#| title: Download (Kb) by File Type\n\nimport plotly.express as px\ndf_volume= alldata_sum[alldata_sum['year'] == thisyear].filter(regex='_volume$')\ndf_volume.columns = df_volume.columns.str.extract(r'^(.*)_volume$')[0]\ndf_volume_long = df_volume.reset_index(drop=True).melt(var_name='File Type', value_name='Volume')\nfig = px.pie(df_volume_long, values='Volume', names='File Type')\n\nfig\n\n\n```\n\n\n# SST\n\n```{python}\n\n# Top 10\n \ndf_all_thisyear = df[df['year'] == thisyear].merge(df_crosswalk, on='dataset_id', how='inner')\ntop10_sst_thisyear = (df_all_thisyear[df_all_thisyear['var']=='sst'].groupby('group_title', as_index=False)[['all_requests', 'requests_x', 'requests_redirect']]\n                  .sum(numeric_only=True)\n                  .nlargest(10, 'all_requests'))\n\n\n# SST sumed by year and dataset_title\ndf_sst = df_all[df_all['var'] == 'sst'].groupby(['year', 'dataset_title'], as_index=False).sum(numeric_only=True).reset_index()\ntop10_sst = df_sst[df_sst['year'] == thisyear].nlargest(10, 'all_requests')\nsst_stats = df_sst[df_sst['year'] == thisyear].sum(numeric_only=True)\n\n\n# value box\nreq_sst = sst_stats[sst_stats.index == 'all_requests'].item()\nuser_sst = sst_stats[sst_stats.index == 'unique_visitors'].item()\ndata_sst = sst_stats[sst_stats.index == 'data_volume_x'].item()\n\n# top10_sst chart\ntop10_sst_years = (df_all[df_all['dataset_title'].isin(top10_sst['dataset_title'])]\n              .groupby(['dataset_title', 'year'], as_index=False)[['all_requests']]\n              .sum())\n\n# top10_sst data table\n#top10_sst.loc[:, ['year', 'dataset_title', 'all_requests']]\ntop10_sst_wide = top10_sst_years.pivot(index='dataset_title', columns ='year', values='all_requests').reset_index()\ntop10_sst_wide.columns.name = None\ntop10_sst_wide = (top10_sst_wide\n              .rename_axis(None, axis=1)\n              .rename(columns={'dataset_title': 'Dataset Title'}))\n\n\n```\n\n## Row {height=10%}\n\n\n::: {.valuebox icon=\"cloud-download-fill\" color=\"#d1d1d1\"}\nNo. of Requests\n\n`{python} \"{:,}\".format(req_sst)`\n\n:::\n\n\n::: {.valuebox icon=\"database-down\" color=\"#e2e2e2\"}\nData Volume (GB)\n\n`{python} \"{:,}\".format(data_sst)`\n\n:::\n\n::: {.valuebox icon=\"person-lines-fill\" color=\"#f9f6f2\"}\nTotal Visitors\n\n`{python} int(user_sst)`\n\n:::\n\n\n## Row {height=30% .tabset}\n\n\n```{python}\n#| title: Top 10 SST\n\nimport plotly.express as px\n\n# top10_sst chart\ntop10_sst_years['year'] = top10_years['year'].astype(str)\n#sorted = top10_sst_years.sort_values(by=['year', 'all_requests'], ascending=False)\n\n\nfig = px.bar(top10_sst_years, x='dataset_title', y='all_requests', \n              color='year', labels={\"dataset_title\": \"Dataset Name\", \"all_requests\": \"Requests\"}, color_discrete_sequence=colors[::-1],barmode='group', width=None)\n\nfig.update_layout(autosize=True, \n       width=None, \n       height=None, \n       xaxis=dict(tickangle=15),\n       legend=dict(\n       orientation=\"h\",  # Horizontal orientation\n       yanchor=\"bottom\",\n       y=1.1,            # Position slightly above the plot area\n       xanchor=\"center\",\n       x=0.5,\n       font=dict(size=13))\n              )\n# show(top10_years)\n```\n\n```{python}\n#| title: Top 10 Data Table\n\nwide_top10_sst = top10_sst_years.pivot(index='dataset_title', columns ='year', values='all_requests').reset_index()\nwide_top10_sst.columns.name = None  # Remove the name from columns index if not needed\nwide_top10_sst = (wide_top10_sst\n              .rename_axis(None, axis=1)\n              .rename(columns={'dataset_title': 'Dataset Name'}))\n\nshow(wide_top10_sst)\n\n```\n\n\n# Wind\n\n```{python}\n\ntop10_wind_thisyear = (df_all_thisyear[df_all_thisyear['var']=='wind'].groupby('group_title', as_index=False)[['all_requests', 'requests_x', 'requests_redirect']]\n                  .sum(numeric_only=True)\n                  .nlargest(10, 'all_requests'))\n\n\n# wind sumed by year and dataset_title\ndf_wind = df_all[df_all['var'] == 'wind'].groupby(['year', 'dataset_title'], as_index=False).sum(numeric_only=True).reset_index()\ntop10_wind = df_wind[df_wind['year'] == thisyear].nlargest(10, 'all_requests')\nwind_stats = df_wind[df_wind['year'] == thisyear].sum(numeric_only=True)\n\n\n# value box\nreq_wind = wind_stats[wind_stats.index == 'all_requests'].item()\nuser_wind = wind_stats[wind_stats.index == 'unique_visitors'].item()\ndata_wind = wind_stats[wind_stats.index == 'data_volume_x'].item()\n\n# top10_wind chart\ntop10_wind_years = (df_all[df_all['dataset_title'].isin(top10_wind['dataset_title'])]\n              .groupby(['dataset_title', 'year'], as_index=False)[['all_requests']]\n              .sum())\n\n\ntop10_wind_wide = top10_wind_years.pivot(index='dataset_title', columns ='year', values='all_requests').reset_index()\ntop10_wind_wide.columns.name = None\ntop10_wind_wide = (top10_wind_wide\n              .rename_axis(None, axis=1)\n              .rename(columns={'dataset_title': 'Dataset Title'}))\n\n\n```\n\n## Row {height=10%}\n\n\n::: {.valuebox icon=\"cloud-download-fill\" color=\"#d1d1d1\"}\nNo. of Requests\n\n`{python} \"{:,}\".format(req_wind)`\n\n:::\n\n\n::: {.valuebox icon=\"database-down\" color=\"#e2e2e2\"}\nData Volume (GB)\n\n`{python} \"{:,}\".format(data_wind)`\n\n:::\n\n::: {.valuebox icon=\"person-lines-fill\" color=\"#f9f6f2\"}\nTotal Visitors\n\n`{python} int(user_wind)`\n\n:::\n\n \n## Row {height=40% .tabset}\n\n\n\n```{python}\n#| title: Top 10 wind\n\nimport plotly.express as px\n\n# top10_wind chart\ntop10_wind_years['year'] = top10_years['year'].astype(str)\n#sorted = top10_wind_years.sort_values(by=['year', 'all_requests'], ascending=False)\n\n\nfig = px.bar(top10_wind_years, x='dataset_title', y='all_requests', \n              color='year', labels={\"dataset_title\": \"Dataset Name\", \"all_requests\": \"Requests\"}, color_discrete_sequence=colors[::-1],barmode='group', width=None)\n\nfig.update_layout(autosize=True, \n       width=None, \n       height=None, \n       xaxis=dict(tickangle=15),\n       legend=dict(\n       orientation=\"h\",  # Horizontal orientation\n       yanchor=\"bottom\",\n       y=1.1,            # Position slightly above the plot area\n       xanchor=\"center\",\n       x=0.5,\n       font=dict(size=13))\n              )\n# show(top10_years)\n```\n\n```{python}\n#| title: Top 10 Data Table\n\nwide_top10_wind = top10_wind_years.pivot(index='dataset_title', columns ='year', values='all_requests').reset_index()\nwide_top10_wind.columns.name = None  # Remove the name from columns index if not needed\nwide_top10_wind = (wide_top10_wind\n              .rename_axis(None, axis=1)\n              .rename(columns={'dataset_title': 'Dataset Name'}))\n\nshow(wide_top10_wind)\n\n```\n"},"formats":{"dashboard":{"identifier":{"display-name":"HTML","target-format":"dashboard","base-format":"dashboard"},"execute":{"fig-width":8,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":false,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":"all","plotly-connected":false,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","page-layout":"custom","nav-buttons":[{"icon":"github","href":"https://github.com/polarwatch/data-dashboard"}],"title":"CoastWatch-West Coast","jupyter":"python3","logo":"img/cw_logo.png","logo-alt":"NOAA CoastWatch logo","scrolling":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["dashboard","html"]}